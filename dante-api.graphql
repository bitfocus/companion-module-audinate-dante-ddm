"""
Controls the rate of traffic.
"""
directive @sustainedRateLimit(
	"""
	Number of occurrences allowed over duration.
	"""
	limit: Int! = 60

	"""
	Number of seconds before limit is reset.
	"""
	duration: Int! = 60
) on OBJECT | FIELD_DEFINITION

"""
Controls the rate of traffic.
"""
directive @loginRateLimit(
	"""
	Number of occurrences allowed over duration.
	"""
	limit: Int! = 60

	"""
	Number of seconds before limit is reset.
	"""
	duration: Int! = 60
) on OBJECT | FIELD_DEFINITION

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Query {
	domains: [Domain]!
	domain(id: ID, name: String): Domain
	unenrolledDevices: [Device!]!
}

type Mutation {
	DevicesEnroll(input: DevicesEnrollInput!): DevicesEnrollPayload
	DevicesUnenroll(input: DevicesUnenrollInput!): DevicesUnenrollPayload
	DeviceRxChannelsSubscriptionSet(input: DeviceRxChannelsSubscriptionSetInput!): DeviceRxChannelsSubscriptionSetPayload
	DeviceClockingUnicastSet(input: DeviceClockingUnicastSetInput!): DeviceClockingUnicastSetPayload
}

interface MutationResponse {
	ok: Boolean!
}

type Device {
	domain: Domain
	id: ID!
	name: String!
	identity: Identity
	manufacturer: Manufacturer
	domainId: ID
	interfaces: [Interface]
	enrolmentState: EnrolmentState
	connection: DeviceConnection
	clockingState: ClockingState
	clockPreferences: ClockPreferences
	capabilities: Capabilities
	picture: String
	location: String
	description: String
	comments: String
	platform: Platform
	product: Product
	rxChannels: [RxChannel]
	txChannels: [TxChannel]
}

type Domain {
	id: ID!
	name: String
	legacyInterop: Boolean
	clockingGroupId: ID
	icon: DomainIcon
	devices: [Device]
	device(id: ID!): Device
}

enum DomainIcon {
	BROADCAST
	RECORDING_STUDIO
	HOUSE_OF_WORSHIP_1
	HOUSE_OF_WORSHIP_2
	HIGHER_EDUCATION
	PRIMARY_EDUCATION
	GOVERNMENT
	TRANSPORTATION_1
	TRANSPORTATION_2
	HEALTH_CARE
	COMMERCIAL
	OFFICE
	MANUFACTURING
	RETAIL
	ARTS_VENUE
	THEATRE_CINEMA
	RESTAURANT
	BAR_CLUB
	HOTEL_CASINO
	THEMED_ENTERTAINMENT
	SPORTS_VENUE_1
	SPORTS_VENUE_2
	RESIDENTIAL_1
	RESIDENTIAL_2
	OTHER
}

type DeviceOverrides {
	id: ID!
	ptp: DevicePtp
	rtp: DeviceRtp
}

type DevicePtp {
	id: ID!
	v2Priority1: Int
	v2Priority2: Int
}

type DeviceRtp {
	id: ID!
	prefixV4: Int
}

"""
The Manufacturer of a device or software.

Examples: "Acme Incorporated"

See also: Product
"""
type Manufacturer {
	id: ID!
	name: String!
}

type Capabilities {
	id: ID!
	CAN_WRITE_PREFERRED_MASTER: Boolean
	CAN_WRITE_EXT_WORD_CLOCK: Boolean
	CAN_WRITE_SLAVE_ONLY: Boolean
	CAN_WRITE_UNICAST_DELAY_REQUESTS: Boolean
	CAN_UNICAST_CLOCKING: Boolean
	mediaTypes: Int
}

type ClockingState {
	id: ID!
	locked: ClockSyncServo
	grandLeader: Boolean
	followerWithoutLeader: Boolean
	multicastLeader: Boolean
	unicastLeader: Boolean
	unicastFollower: Boolean
	muteStatus: String
	frequencyOffset: String
}

enum ClockSyncServo {
	"""
	if a device's servo is in sync or a grand leader for uuidV2
	"""
	LOCKED

	"""
	if a device is online and servo is not in ( sync or a grand leader for uuidV2 )
	"""
	NOT_LOCKED

	"""
	if a device is offline (this UNKNOWN is not the same as unknown enum in clockServo or servo state,
	  we cannot distinguish unknown and none in ddm side, dante model cpp api has NONE value
	)
	"""
	UNKNOWN
}

type ClockPreferences {
	id: ID!
	externalWordClock: Boolean
	leader: Boolean
	unicastClocking: Boolean
	v1UnicastDelayRequests: Boolean
	overrides: DeviceOverrides
}

type Identity {
	id: ID!
	instanceId: ID!

	"""
	The name that the device will have when it is unboxed or factory reset. Typically contains the MAC address. Example: 'AVIOAO2-51f9e7'
	"""
	defaultName: String

	"""
	The name given to the device by the user. Example: 'Foyer'
	"""
	actualName: String

	"""
	The name given to the device (actualName) which may be appended with a numeric identifier if  a device of the same actualName already exists. Example: 'Foyer (2)'
	"""
	advertisedName: String @deprecated(reason: "Not used in managed environments. Use device.name")
	manufacturerId: String @deprecated(reason: "Use manufacturer.id")
	manufacturerName: String @deprecated(reason: "Use manufacturer.name")
	productModelId: String
	productModelName: String
	productVersion: String
	productSoftwareVersion: String
	danteVersion: String
	danteHardwareVersion: String
}

type Interface {
	id: ID!
	macAddress: String
	address: String
	netmask: Int
	subnet: String
}

type DeviceConnection {
	id: ID!
	state: ConnectionState
	lastChanged: DateTime
}

enum ConnectionState {
	DISCONNECTED
	ESTABLISHED
	READY
}

enum EnrolmentState {
	UNENROLLED
	ENROLLED
	ENROLLING
	UNENROLLING
	CHANGING_DOMAIN
}

"""
The device Platform describes the Dante Platform that the device is built upon.

This is the Audinate product used *inside* the manufacturers Product. See also: Product

Examples: Brooklyn 2, Ultimo, DEP, etc.

This section will be extended with additional information about the Platform as required. Examples include
  - Icon
  - Latest available firmware version
  - Links to release notes
  - Capabilities
"""
type Platform {
	id: ID!
	name: String!
}

"""
The device Product describes information about the manufactured product (that is, the device the end-user interacts with)

This is the OEM product (ie. the outside of the box). See also: Platform and Manufacturer

Examples include: "Amplifier 5000", "Mixer 900"

This section will be extended with additional information about the Platform as required. Examples include
  - Icon
  - Latest available firmware version
  - Links to release notes
  - Capabilities
"""
type Product {
	"""
	The name of the product from the OEM
	"""
	id: ID!
	name: String!
}

type RxChannel {
	"""
	A unique identifier for the channel, used for caching purposes. Use 'index' when displaying to users
	"""
	id: ID!

	"""
	The channel number, starting at 1.

	Examples:
	  - 1
	  - 19

	This index is unique on the given device and is not media specific.
	"""
	index: Int!
	enabled: Boolean

	"""
	The name of the channel
	"""
	name: String

	"""
	The device name of the device that this channel is subscribed to
	"""
	subscribedDevice: String

	"""
	The Tx channel name on the the device that this channel is subscribed to
	"""
	subscribedChannel: String
	status: RxChannelStatus
	statusMessage: String
	summary: RxChannelSummary
	mediaType: ChannelMediaType
}

enum ChannelMediaType {
	AUDIO
	VIDEO
	ANCILLARY
	UNDEFINED
	ALL
	GENERIC
}

enum RxChannelStatus {
	"""
	No subscription for this channel
	"""
	NONE

	"""
	Channel Name not yet found on network
	"""
	UNRESOLVED

	"""
	Channel Name has been found, but not yet processed. This is an transient state before the flow is created
	"""
	RESOLVED

	"""
	Error: an error occurred while trying to resolve the channel name
	"""
	RESOLVE_FAIL

	"""
	Channel is successfully subscribed to own TX channels (local loopback mode)
	"""
	SUBSCRIBE_SELF

	"""
	Error: Channel Name explicitly does not exist on this network
	"""
	RESOLVED_NONE

	"""
	A flow has been configured but does not have sufficient information to
	establish an audio connection.

	For example, configuring a template with no associations.
	"""
	IDLE

	"""
	Channel Name has been found and processed; setting up flow. This is an transient state
	"""
	IN_PROGRESS

	"""
	Active subscription to an automatically configured source flow
	"""
	DYNAMIC

	"""
	Active subscription to a manually configured source flow
	"""
	STATIC

	"""
	Manual flow configuration bypassing the standard subscription process
	"""
	MANUAL

	"""
	Error: The name was found but the connection process failed
	(the receiver could not communicate with the transmitter)
	"""
	NO_CONNECTION

	"""
	Error: Channel formats do not match
	"""
	CHANNEL_FORMAT

	"""
	Error: Flow formats do not match,
	e.g. Multicast flow with more slots than receiving device can handle
	"""
	BUNDLE_FORMAT

	"""
	Error: Receiver is out of resources (e.g. flows)
	"""
	NO_RX

	"""
	Error: Receiver couldn't set up the flow
	"""
	RX_FAIL

	"""
	Error: Transmitter is out of resources (e.g. flows)
	"""
	NO_TX

	"""
	Error: Transmitter couldn't set up the flow
	"""
	TX_FAIL

	"""
	Error: Receiver got a QoS failure (too much data) when setting up the flow.
	"""
	QOS_FAIL_RX

	"""
	Error: Transmitter got a QoS failure (too much data) when setting up the flow.
	"""
	QOS_FAIL_TX

	"""
	Error: Tx rejected the address given by rx (usually indicates an ARP failure)
	"""
	TX_REJECTED_ADDR

	"""
	Error: Transmitter rejected the bundle request as invalid
	"""
	INVALID_MSG

	"""
	Error: Tx channel latency higher than maximum supported Rx latency
	"""
	CHANNEL_LATENCY

	"""
	Error: Tx and Rx and in different clock subdomains
	"""
	CLOCK_DOMAIN

	"""
	Error: Attempt to use an unsupported feature
	"""
	UNSUPPORTED

	"""
	Error: All Rx links are down
	"""
	RX_LINK_DOWN

	"""
	Error: All Tx links are down
	"""
	TX_LINK_DOWN

	"""
	Error: can't find suitable protocol for dynamic connection
	"""
	DYNAMIC_PROTOCOL

	"""
	Error: Channel does not exist (eg no such local channel)
	"""
	INVALID_CHANNEL

	"""
	Error: Tx Scheduler failure
	"""
	TX_SCHEDULER_FAILURE

	"""
	Error: The given subscription to self was disallowed by the device
	"""
	SUBSCRIBE_SELF_POLICY

	"""
	Error: There is an external issue with Tx
	"""
	TX_NOT_READY

	"""
	Error: There is an external issue with Rx
	"""
	RX_NOT_READY

	"""
	Error: Tx device cannot support additional unicast flows
	"""
	TX_FANOUT_LIMIT_REACHED

	"""
	Error: Rx device does not support the signal encryption
	"""
	TX_CHANNEL_ENCRYPTED

	"""
	Error: Unexpected response from TX device
	"""
	TX_RESPONSE_UNEXPECTED

	"""
	Error: Template-based subscription failed: template and subscription device names don't match
	"""
	TEMPLATE_MISMATCH_DEVICE

	"""
	Error: Template-based subscription failed: flow and channel formats don't match
	"""
	TEMPLATE_MISMATCH_FORMAT

	"""
	Error: Template-based subscription failed: the channel is not part of the given multicast flow
	"""
	TEMPLATE_MISSING_CHANNEL

	"""
	Error: Template-based subscription failed: something else about the template configuration
	made it impossible to complete the subscription using the given flow
	"""
	TEMPLATE_MISMATCH_CONFIG

	"""
	Error: Template-based subscription failed: the unicast template is full
	"""
	TEMPLATE_FULL

	"""
	Error: Tx access control denied the request
	"""
	TX_ACCESS_CONTROL_DENIED

	"""
	Tx access control request is in progress
	"""
	TX_ACCESS_CONTROL_PENDING

	"""
	Error: Rx device does not have a supported subscription mode (unicast/multicast) available
	"""
	RX_UNSUPPORTED_SUB_MODE

	"""
	Error: Tx device does not have a supported subscription mode (unicast/multicast) available
	"""
	TX_UNSUPPORTED_SUB_MODE

	"""
	Error: HDCP key negotiation failed
	"""
	HDCP_NEGOTIATION_FAILED

	"""
	Error: Unexpected system failure
	"""
	SYSTEM_FAIL
}

enum RxChannelSummary {
	NONE
	CONNECTED
	IN_PROGRESS
	WARNING
	ERROR
}

"""
A transmit channel of media (either audio or video) from a device
"""
type TxChannel {
	id: ID!
	index: Int!
	name: String!
	mediaType: ChannelMediaType
}

input DevicesEnrollInput {
	domainId: ID!
	deviceIds: [ID!]!

	"""
	Clear Configuration will reset the following configuration settings to the device defaults:
	  - Device Name
	  - Channel labels
	  - Latency
	  - Sample rate
	  - Encoding
	  - Subscriptions
	Note: Clear Configuration is not supported for legacy devices.
	"""
	clearConfig: Boolean = false
}

type DevicesEnrollPayload implements MutationResponse {
	ok: Boolean!
}

input DevicesUnenrollInput {
	deviceIds: [ID!]!

	"""
	Clear Configuration will reset the following configuration settings to the device defaults:
	  - Device Name
	  - Channel labels
	  - Latency
	  - Sample rate
	  - Encoding
	  - Subscriptions
	Note: Clear Configuration is not supported for legacy devices.
	"""
	clearConfig: Boolean = false
}

type DevicesUnenrollPayload implements MutationResponse {
	ok: Boolean!
}

input DeviceRxChannelsSubscriptionSetInput {
	"""
	The ID of the device which will receive the subscription

	Examples:
	  "0ae3b2edf1374c0c836c96649e879c2f" (for software devices like DVS)
	  "001dc1fffe501c25:0" (for hardware devices like AVIO)
	"""
	deviceId: ID!
	subscriptions: [DeviceRxChannelsSubscriptionInput!]!

	"""
	Allows setting a subscription to a device name when that device does not currently exist, typically because it is offline.

	Subscriptions to unknown devices may be helpful when restoring a preset.

	Dante resolves subscriptions by name, so this is a valid configuration. However, the subscription will remain unresolved until the transmitter device is online.

	If set, 'allowSubscriptionToNonExistentChannel' must also be set since the channel name cannot resolve when the device is offline
	"""
	allowSubscriptionToNonExistentDevice: Boolean = false

	"""
	Allows setting a subscription to a channel name even when the transmitter device does not have a channel by that name

	Subscriptions to unknown devices or channels may be helpful when restoring a preset.

	Dante resolves subscriptions by name, so this is a valid configuration. However, the subscription will remain unresolved until the transmitter device has a channel by this name.

	If this value is set to true, then additional checks (such as checking the media types of each channel match) will not be performed.
	"""
	allowSubscriptionToNonExistentChannel: Boolean = false
}

input DeviceRxChannelsSubscriptionInput {
	"""
	The channel number on the device which will receive the subscription

	Examples:
	  - 1
	  - 19

	Channel numbers start at 1

	This index is unique on the given device and is not media specific.
	The index to use should be determined by first querying the channels on the device, finding the channel you want to modify, and then use that index.
	"""
	rxChannelIndex: Int!

	"""
	The name of the device which is transmitting the media that you wish to subscribe to

	Device *names* are used in Dante subscriptions (rather than IDs) so that the the subscription will
	follow a device of that name, rather than a specific device of that ID.
	This allows the transmitting device to be swapped out for a device of the same name.

	Example: "AVIOAO2-51f9e7"

	💡 An empty subscribedDevice and subscribedChannel will unsubscribe the channel
	"""
	subscribedDevice: String!

	"""
	The channel name on the device which is transmitting the media

	Channel *labels* are used in Dante (rather than IDs) so that the the subscription will
	follow the channel of that label, rather than a specific channel of that ID.
	This allows the transmitting device rearrange it's transmit channels,
	without needing to update the subscriptions on receiving devices.

	Examples:
	  "Audio L"
	  "CH1"
	  "01"

	💡 An empty subscribedDevice and subscribedChannel will unsubscribe the channel
	"""
	subscribedChannel: String!
}

type DeviceRxChannelsSubscriptionSetPayload implements MutationResponse {
	ok: Boolean!
}

input DeviceClockingUnicastSetInput {
	deviceId: ID!
	enabled: Boolean!
}

type DeviceClockingUnicastSetPayload implements MutationResponse {
	ok: Boolean!
}
